# DON'T PANIC! You don't have to read every note in these files. They are only
# there in case you want to understand what the code is doing. You can just
# replace the code with your own values and only read the notes if you have
# problems.

# Use comments like these to explain how your code works--especially if it is
# complex. Hash tags (#) can also be used to temporarily remove a line while
# you are trying to find which line is causing an error.

# Specifying the text domain is necessary for your campaign to be translated.
# You should use "wesnoth-" plus the abbreviation of the campaign in lower case.
#textdomain wesnoth-wmlg

# This is a note to translators. The "po" makes sure they see it.
# po: The WML_Guide campaign should not be translated in the normal way. It should be copied and reposted with a new name because the most important strings to translate are actually the WML comments. Call it something like: "WML_Guide (espaÃ±ol)" or "Modelo_de_WML".

# Here we define the text domain we just specified above.
[textdomain]
	name=wesnoth-wmlg
	# This folder doesn't exist because this campaign shouldn't be
	# translated. That will cause an error to appear in the logs, but it
	# won't hurt anything. You should still add the folder for your *own*
	# campaign before you publish though.
	path="data/add-ons/WML_Guide/translations"
[/textdomain]

[campaign]
	# The ID is used internally in saved games. It usually matches the name.
	id=WML Guide
	# Icon and image paths automatically start in the core game's images
	# folder, but you can specify a different folder by using a path
	# that starts from your userdata folder. See the campaign image for an
	# example of that. "~RC(magenta>red)" recolors the sprite. It changes all
	# the magenta pixels to red so the icon appears to be on the red team.
	icon="units/human-magi/red-mage-attack-magic-2.png~RC(magenta>red)"
	image="data/add-ons/WML_Guide/images/campaign_image.png"
	# "name" is what the player sees in the campaign list. The underscore (_)
	# indicates that the text should be translated. Put an underscore before
	# any text that the player can see.
	name= _ "WML Guide"
	# The abbreviation is used to name saved games.
	abbrev= _ "WMLG"
	# Rank specifies where to put the campaign in the campaign list. It
	# should not be used with user-made-campaigns that are posted on the
	# add-on server, but you can temporarily set it to 1 for testing
	# purposes, so you don't always have to scroll through the
	# whole campaign list to find it.
#	rank=1
	# The years are used if the campaign list is sorted chronologically.
	# YW stands for Years Wesnoth. You can also use BW--Before Wesnoth if
	# your campaign takes place deep in Wesnoth prehistory.
	start_year=100 YW
	end_year=101 YW
	# This is the ID of the starting scenario. You can temporarily change it to
	# point to whatever scenario you are working on to make testing it easier.
	first_scenario=01_K_Mostu
	# For each difficulty you have, you get to choose an icon, a unit name or
	# fancy descriptive word, and a word that tells what that difficulty
	# actually is. The CAMPAIGN_DIFFICULTY macro makes it easy to do all of
	# that in one line. The standard difficulties are: Beginner, Normal,
	# Challenging, Difficult, and Nightmare. {DEFAULT_DIFFICULTY} goes
	# after the level to be highlighted when the difficulty list appears.
	{CAMPAIGN_DIFFICULTY EASY "units/human-magi/mage.png~RC(magenta>red)" ( _ "Initiate") ( _ "Beginner")}
	{DEFAULT_DIFFICULTY}
	{CAMPAIGN_DIFFICULTY NORMAL "units/human-magi/red-mage.png~RC(magenta>red)" ( _ "Red Mage") ( _ "Normal")}
	{CAMPAIGN_DIFFICULTY HARD "units/human-magi/arch-mage.png~RC(magenta>red)" ( _ "Arch Mage") ( _ "Challenging")}
	# If this campaign is selected, this variable will be defined. That lets
	# the game know that it needs to load all this campaign's data.
	# (See the "#ifdef" line below.)
	define=WML_GUIDE
	# If you click on a campaign in the list, you see a description and an
	# image. There is a standard format for the description which includes a
	# blank line.
	description= _ "The code for this campaign includes explanations of almost every line. Look for the code in your add-ons folder. (Use the blue [ i ] in the bottom-left corner of the screen.) Or, play the campaign and help Harry Hacker defeat some monsters!

(Novice level, 2 scenarios.)"

	# This information will appear in the credits that scroll by when you
	# win the campaign.
	[about]
		title= _ "Campaign Design and Programming"
		[entry]
			name="Dan Gerhards (beetlenaut)"
		[/entry]
	[/about]
[/campaign]

# If the variable WML_GUIDE is defined, then this "if defined" section gets
# read by the game. (See the "define=" line above.)
#ifdef WML_GUIDE
	# The paths for images and sounds automatically start in the game's core
	# folder, but you can add the base path to your campaign so the game
	# looks in *your* images and sounds folders as well. This path starts in
	# your userdata folder.
	[binary_path]
		path=data/add-ons/WML_Guide
	[/binary_path]
	# Here we need to add any folders with .cfg files in them to _main.cfg.
	# Curly braces ({ }) cause the contents of a folder (or file) to get pasted
	# in that place. The tilde (~) fills in the whole path of the add-ons
	# folder. The game will automatically load all .cfg files in each folder,
	# but won't load files with other extensions.
	
	# A utils folder is the usual way of storing files defining custom macros.
	# It should go first so the macros can be used by other .cfg files. This
	# campaign doesn't need a utils folder yet, so this line is commented out.
#	{~add-ons/WML_Guide/utils}

    # The scenarios folder usually needs to go last.
	{~add-ons/WML_Guide/scenarios}
	
	# Add custom units inside a [units] tag.
	[units]
		# Don't add this folder if it is empty.
		{~add-ons/WML_Guide/units}
	[/units]
#endif
