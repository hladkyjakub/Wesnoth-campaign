# DON'T PANIC! You don't have to read every note in these files. They are only
# there in case you want to understand what the code is doing. You can just
# replace the code with your own values and only read the notes if you have
# problems.

# This scenario includes some commonly-used events and other structures. To get
# more information about any tag and which keys and subtags are allowed inside
# it, check the reference pages: http://wiki.wesnoth.org/ReferenceWML

#textdomain wesnoth-wmlg

[scenario]
	name= _ "Big Bug"
	id=02_Big_Bug
	map_data="{~add-ons/WML_Guide/maps/02_Big_Bug.map}"
	# If the next scenario is "null", this is the end of the campaign.
	next_scenario=03_B_Bug

	{DEFAULT_MUSIC_PLAYLIST}
	# The underground schedule is like night all the time.
	{UNDERGROUND}
	# A time area can have a different schedule than the rest of the
	# scenario. It's useful for adding caves to part of a map.
	[time_area]
		# The commas determine which x coordinate is paired with each y
		# coordinate (or range). Any standard location tag can take a set
		# of x's and y's like this. These coordinates are for areas around
		# each of the torches on the map.
		x=3, 4, 4, 5, 5, 6, 7, 8, 9, 9, 10, 10, 11, 11, 12
		y=7, 2, 6-7, 2-3, 7, 2, 6, 5-6, 6, 8, 4, 7-8, 4-5, 8, 4
		# There are predefined macros for normal times like {DUSK},
		# {MORNING}, etc. You can also define a custom time like this:
		[time]
			name= _ "Torchlight"
			image=misc/time-schedules/schedule-indoors.png
			red=10
			green=-20
			blue=-35
			# A bonus for lawful or chaotic units could be included
			# here, but we want torchlight to be neutral. It just
			# removes the effect of being underground.
		[/time]
	[/time_area]
	# Settings turns to -1 means there is no turn limit. Since this is the
	# last scenario, a limit isn't necessary.
	turns= -1
	
	# The story tag shows screens of text and/or images before the scenario
	# starts. Each [part] is one screen, and there can be any number of parts.
	[story]
		[part]
			story= _ "Our hero finds out that there is a bounty out on a large, nasty bug. He tracks it down, and follows it into a cave."
			# This is the image that appears above the text.
			background="portraits/monsters/scorpion.png"
			# The image can be its original size or fill the screen.
			scale_background=no
		[/part]
	[/story]

	[side]
		type=Red Mage
		name= _ "Harry Hacker"
		# If there is a unit with this id available on the recall list,
		# it will be used. The name, type, and other unit attributes in
		# this side tag will be ignored. We're including them anyway
		# so we can start on this scenario during testing.
		id=harry
		facing=se
		side=1
		controller=human
		user_team_name= _ "Good Guys"
		recruit=Mage, Dark Adept, Spearman, Heavy Infantryman, elfi_ochranka, Elvish Fighter
		{GOLD 180 140 120}
		# This turns shroud on for this side. Fog is turned on the same
		# way. Neither of those have any effect on the ai.
		shroud=yes
	[/side]

	[side]
		type=Giant Scorpion
		name= _ "Big Bug"
		id=bug
		facing=sw
		side=2
		controller=ai
		recruit=Thug, elfi_ochranka
		user_team_name= _ "Bad Guys"
		# The enemy doesn't need much gold because we are going to give
		# him a bunch of free units.
		{GOLD 0 20 60}
		# The default income is 2. We will give the enemy more than that
		# on harder levels. This is added to the income for villages.
		{INCOME 2 4 6}
	[/side]

# This creates a macro to avoid having to copy and paste these lines. TYPE is a
# value that will be sent to the SIDE_2_UNIT macro when it is called during the
# next event.
#define SIDE_2_UNIT TYPE
	[unit]
		side=2
		# This substitutes whatever was passed in the macro call.
		type={TYPE}
		x, y=22, 6
		moves=0
		facing=sw
		# A huge number of other keys are available when creating a unit.
		# Check the reference page on "unit" to see them all.
	[/unit]
#enddef
	
	[event]
		name=prestart
		# There are dozens of permitted event names that fire for
		# different reasons. You should look them up.
		[objectives]
			side=1
			[objective]
				description= _ "Defeat the enemy leader"
				condition=win
			[/objective]
			[objective]
				description= _ "Death of Harry"
				condition=lose
			[/objective]
			[gold_carryover]
				bonus=yes
				carryover_percentage=40
			[/gold_carryover]
			# This macro provides a standardized note.
			{IS_LAST_SCENARIO}
		[/objectives]
		
		# These tags cause one player to take ownership of a village or a
		# circle of villages.
		[capture_village]
			side=1
			x, y=3, 3
		[/capture_village]
		[capture_village]
			side=2
			x, y=22, 6
			radius=5
		[/capture_village]
		
		# These commands put images on the map, but do nothing else. We
		# will need to create events that make the images do something in
		# the game. (See below.)
		[item]
			x, y=6, 4
			# This is a core image.
			image="items/ring-silver.png"
		[/item]
		[item]
			x, y=5, 9
			# This image is in this campaign's image folder, but the
			# binary_path in _main.cfg makes the game look there.
			image="map.png"
		[/item]

		# We call the macro defined above with different types.
		# Paretheses () in a macro call make two words act like one value.
		{SIDE_2_UNIT (elfi_ochranka)}
		{SIDE_2_UNIT (elfi_ochranka)}
		# Giant Ant is not a core unit. It's configuration file is stored in
		# WML_Example/units, and its images are in subfolders of
		# WML_Example/images.
		{SIDE_2_UNIT (elfi_ochranka)}
# "ifndef" means "if not defined".
#ifndef EASY
		# NORMAL and HARD difficulties get these extra units.
		{SIDE_2_UNIT (elfi_ochranka)}
		{SIDE_2_UNIT (elfi_ochranka)}
#endif
#ifdef HARD
		{SIDE_2_UNIT Swordsman}
#endif
	[/event]
	
	[event]
		name=start
		[message]
			speaker=harry
			message= _ "That bug may have brought some friends. Who knows what we will face?"
		[/message]
	[/event]
	
	# If the player finds a map, then the shroud is removed.
	[event]
		name=moveto
		[filter]
			# The event only fires when a player's unit is on the
			# map's location, which was set up in the prestart event.
			side=1
			x, y=5, 9
		[/filter]
		
		# The unit picks up the map, so we remove its image.
		[remove_item]
			x, y=5, 9
		[/remove_item]
		[message]
			speaker=$unit.id
			message= _ "I found a map of this cave!"
		[/message]
		# Removing the shroud only works for one side, and only for the
		# hexes that are specified.
		[remove_shroud]
			side=1
			# This specifies the whole map including the border.
			# x's and y's can usually be ranges like this.
			x=0-25
			y=0-11
		[/remove_shroud]
	[/event]

	# This event shows a message with two options for the player to choose.
	# Each option has a set of commands that goes with it. This is to make
	# the ring image have an action.
	[event]
		name=moveto
		# Events only need an id if you plan to fire them manually or
		# remove them later.
		id=take_ring
		# Normally, events only fire once. In this case, we want the event
		# to keep firing until a unit takes the ring. This command sets
		# that option.
		first_time_only=no
		[filter]
			x, y=6, 4
		[/filter]
		
		[message]
			speaker=$unit.id
			message= _ "I think this is a ring of speed! Should I take it?"
			[option]
				label= _ "Yes, Iâ€™ll take it."
				[command]
					[object]
						name= _ "Ring of Speed"
						image=items/ring-silver.png
						description= _ "This ring will increase your maximum speed by 2."
						[filter]
							id=$unit.id
						[/filter]

						[effect]
							apply_to=movement
							increase=2
						[/effect]
					[/object]
					# This removes the ring image.
					[remove_item]
						x, y=6, 4
					[/remove_item]
					# Now we need the event to stop firing,
					# so we remove it.
					[remove_event]
						id=take_ring
					[/remove_event]
				[/command]
			[/option]

			[option]
				label= _ "No, I think someone else should wear it."
				[command]
					# If a moveto event fires, the player
					# can't undo that move because something
					# might have changed in the game. But, if
					# the player chooses this option, there is
					# no effect. There is no reason to prevent
					# the player from going back, so we use
					# this empty tag. (Undo won't work if the
					# unit reveals some previously-shrouded
					# area though.)
					[allow_undo]
					[/allow_undo]
				[/command]
			[/option]
		[/message]
	[/event]
	
	[event]
		# A "last breath" event fires when the filtered unit is killed,
		# but not yet removed from the screen. It stores the recently
		# deceased unit in [unit], and the one that did the killing in
		# [second_unit]. (We know this because it says so in the WML
		# reference page for "event".)
		name=last breath
		[filter]
			id=bug
		[/filter]
		[message]
			speaker=$second_unit.id
			message= _ "Squashed him!"
		[/message]
	[/event]

	[event]
		name=enemies defeated
		[endlevel]
			result=victory
			carryover_report=no
		[/endlevel]
	[/event]
[/scenario]
